<div class="training-main-container">
    <h1 class="content-header">Service Dog Application</h1>
    <h2>Please complete the following application. Once received you will be sent a full application.</h2>
    <form class="training-input-form" id="trainingForm">
        <p>How would you like to receive the application?</p>
        <div class="option-form">
            <div>
                <label for="r-mail">Mail</label>
                <input class="radio" type="radio" id="r-mail" name="receiveMethod" value="mail" required>
            </div>
            <div>
                <label for="r-email">E-mail</label>
                <input class="radio" type="radio" id="r-email" name="receiveMethod" value="email" required>
            </div>
            
        </div>

        <div>
            <label for="title">Title:</label>
            <select id="title" name="title" required>
                <option value="Mr.">Mr.</option>
                <option value="Mrs.">Mrs.</option>
                <option value="Miss.">Miss.</option>
                <option value="Ms.">Ms.</option>
            </select>
        </div>

        <div>
            
            <label for="firstName">First Name:</label>
            <input type="text" id="firstName" name="firstName" required>
        </div>

        <div >
            <label for="lastName">Last Name:</label>
            <input type="text" id="lastName" name="lastName" required>
        </div>

        <div>
            <label for="address">Address:</label>
            <input type="text" id="address" name="address" required>
        </div>

        <div>
            <label for="city">City:</label>
            <input type="text" id="city" name="city" required>
        </div>

        <div>
            <label for="province">Province:</label>
            <input type="text" id="province" name="province" required>
        </div>

        <div>
            <label for="postalCode">Postal Code:</label>
            <input type="text" id="postalCode" name="postalCode" required>
        </div>

        <div>
            <label for="MobileNumber">Mobile Number:</label>
            <input type="tel" id="MobileNumber" name="mobileNumber" required>
        </div>

        <div>
            <label for="email">Email Address:</label>
            <input type="email" id="email" name="email" required>
        </div>

        <div>
            <label for="healthInsurance">Health Insurance Plan #:</label>
            <input type="text" id="healthInsurance" name="healthInsurance">
        </div>

        <div>
            <label for="dob">Date of Birth:</label>
            <input type="date" id="dob" name="dob" required>
        </div>
        <p>Are you registered blind?</p>
        <div class="option-form">
            <div>
                <label for="registeredBlindYes">Yes</label>
                <input class="radio" type="radio" id="registeredBlindYes" name="registeredBlind" value="Yes" required>
            </div>
            <div>
                <label for="registeredBlindNo">No</label>
                <input class="radio" type="radio" id="registeredBlindNo" name="registeredBlind" value="No" required>
            </div>
            
        </div>
        <p>Have you had a low vision assessment?</p>
        <div class="option-form">
            
            <div>
                <label for="lowVisionAssessmentYes">Yes</label>
                <input class="radio" type="radio" id="lowVisionAssessmentYes" name="lowVisionAssessment" value="Yes" required>
            </div>
            <div>
                <label for="lowVisionAssessmentNo">No</label>
                <input class="radio" type="radio" id="lowVisionAssessmentNo" name="lowVisionAssessment" value="Yes" required>
            </div>
                

        </div>
        <p>Are you a long cane user?</p>
        <div class="option-form">

            <div>
                <label for="caneUserYes">Yes</label>
                <input class="radio" type="radio" id="caneUserYes" name="caneUser" value="Yes" required>
            </div>
            <div>
                <label for="caneUserNo">No</label>
                <input class="radio" type="radio" id="caneUserNo" name="caneUser" value="No" required>
            </div>
            
        </div>
        <p>Have you had a guide dog before?</p>
        <div class="option-form">
            
            <div>
                <label for="guideDogExperienceYes">Yes</label>
                <input class="radio" type="radio" id="guideDogExperienceYes" name="guideDogExperience" value="Yes" required>
            </div>
            <div>
                <label for="guideDogExperienceNo">No</label>
                <input class="radio" type="radio" id="guideDogExperienceNo" name="guideDogExperience" value="No" required>
            </div>
            
        </div>
        <p>Have you applied to other guide dog schools?</p>
        <div class="option-form">
            
            <div>
                <label for="otherSchoolsYes">Yes</label>
                <input class="radio" type="radio" id="otherSchoolsYes" name="otherSchools" value="Yes" required>
            </div>
            <div>
                <label for="otherSchoolsNo">No</label>
                <input class="radio" type="radio" id="otherSchoolsNo" name="otherSchools" value="No" required>
            </div>
            
        </div>
        <p>Have you applied to Service Dogs for the Blind before?</p>
        <div class="option-form">
            
            <div>
                <label for="canadianGuideDogsYes">Yes</label>
                <input class="radio" type="radio" id="canadianGuideDogsYes" name="canadianGuideDogs" value="Yes" required>
            </div>
            <div>
                <label for="canadianGuideDogsNo">Yes</label>
                <input class="radio" type="radio" id="canadianGuideDogsNo" name="canadianGuideDogs" value="No" required>
            </div>

        </div>
        <p>Canadian Guide Dogs for the Blind is committed to protecting the privacy,
            confidentiality, accuracy, and security of any personal information that we collect, use, retain, and
            disclose in the course of the programs we offer. By clicking submit, you give Canadian Guide Dogs for
            the Blind permission to use your information for the purpose of your application for a guide dog.</p>
        <div class="option-form">
            <div>
                <label for="privacyPolicyAgree">I agree</label>
                <input class="checkbox" type="checkbox" id="privacyPolicyAgree" name="privacyPolicyAgree" value="true" required>
            </div>
        </div>
        <button id="submitFormBtn" type="submit" class="btn btn-primary">Submit Application</button>
        
    </form>
    <div id="successModal">
        <div>
          
            <p id="application-submit-message">Application is submitted!</p>
        </div>
    </div>
</div>
<script>
    const trainingForm = document.getElementById('trainingForm');
    const successModal = document.getElementById('successModal');
    successModal.style.display = 'none';
    const errorElement = document.getElementById('application-submit-message')


    document.getElementById('submitFormBtn').addEventListener('click', function (event) {
        var form = document.getElementById('trainingForm');
        var radioGroup = document.querySelectorAll('input[type="radio"][required]');
        var radioSelected = false;
    
        for (var i = 0; i < radioGroup.length; i++) {
            
            if (radioGroup[i].checked) {

                
                radioSelected = true;
                var parentNode = radioGroup[i].closest('.option-form');
    
                removeErrorMessages(parentNode);
                break
            }else{
                var optionForm = radioGroup[i].closest('.option-form');
                insertErrorMessage(optionForm, 'Please select an option');
            }
            
        }
    
        
        var elements = form.elements;
    
        for (var i = 0; i < elements.length; i++) {
            if (elements[i].hasAttribute('required') && elements[i].value.trim() === '') {
                elements[i].style.borderColor = 'red';
                insertErrorMessage(elements[i].parentNode, 'This field is required');
            } else {
                elements[i].style.borderColor = '';
                removeErrorMessages(elements[i].parentNode);
            }
        }
    
        
        if (form.querySelector('.error')) {
            event.preventDefault();
        }
    });
    
    function insertErrorMessage(parentNode, message) {
        var errorMessage = parentNode.querySelector('.error');
        if (!errorMessage) {
            errorMessage = document.createElement('span');
            errorMessage.className = 'error';
            errorMessage.style.fontSize = "13px"
            parentNode.appendChild(errorMessage);
        }
        errorMessage.textContent = message;
    }
    
    function removeErrorMessages(parentNode) {
        if (parentNode) {
            var errorMessages = parentNode.querySelectorAll('.error');
            for (var i = 0; i < errorMessages.length; i++) {
                parentNode.removeChild(errorMessages[i]);
            }
    
            // clear the border color
            parentNode.querySelector('input, select').style.borderColor = '';
        }
    }
    var radioButtons = document.querySelectorAll('input[type="radio"]');
    

    radioButtons.forEach(radio => {
        radio.addEventListener('click', ()=>{
            var optionForm = radio.closest('.option-form');
            removeErrorMessages(optionForm);
        })
    })

    var inputFields = document.querySelectorAll('input[type="text"], input[type="number"],input[type="tel"],input[type="email"],input[type="date"]',);
    inputFields.forEach(input => {
        input.addEventListener('input', () => {
            var parentNode = input.parentNode;
            removeErrorMessages(parentNode);
        });
    });
    
    const dobElement = document.getElementById('dob')
    dobElement.addEventListener('input', () =>{
        var parentNode = dobElement.parentNode;
        removeErrorMessages(parentNode);
    })

    trainingForm.addEventListener('submit', function(event) {
        event.preventDefault();

        const isEmailValid = checkEmail();
        const isMobileNumberValid = checkMobileNumber();

        if (!isEmailValid || !isMobileNumberValid) {
            return;
        }
        const formDataObject = {};

        const formData = new URLSearchParams(new FormData(trainingForm));

        for (const [key, value] of formData.entries()) {
            formDataObject[key] = value;

        }
        
        fetch('/our-dogs/training-application', {
            method: 'POST',
            body: JSON.stringify(formDataObject),
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            if (response.ok) {
                successModal.style.display = 'block';
                
                errorElement.textContent = "Application Submitted Succesfully.";

                setTimeout(function() {
                    successModal.style.display = 'none';
                }, 4000);
                trainingForm.reset();
            } else {

                successModal.style.display = 'block';
                
                errorElement.textContent = "Error submitting form, Please try again later.";
                setTimeout(function() {
                    successModal.style.display = 'none';

                }, 4000);

                console.error('Error submitting form:', response.status, response.statusText);
                
            }
        })
        .catch(error => {
            console.error('Error submitting form:', error);
        });
    });
    const mobileNumberInput = document.getElementById('MobileNumber');


    const emailInput = document.getElementById('email');

    function isValidEmail(email) {
        const allowedProviders = ['gmail.com', 'hotmail.com'];
        const allowedExtensions = ['.net', '.dev', '.com', '.in'];

        if (!email || email.indexOf('@') < 1) {
            return false;
        }

        const [username, domain] = email.split('@');
        const [, extension] = domain.split('.');

        const isProviderValid = allowedProviders.includes(domain);
        const isExtensionValid = allowedExtensions.includes(`.${extension}`);

        return isProviderValid && isExtensionValid;
    }


    function checkEmail() {
        const emailValue = emailInput.value.trim();
        const isEmailValid = isValidEmail(emailValue);
        const emailElement = document.getElementById('email');
        
        var parentNode = emailElement.parentElement;
     
        if (emailValue === '') {
            emailElement.style.borderColor = '#ccc';
            removeErrorMessages(parentNode);
        } else if (isEmailValid) {
            emailElement.style.borderColor = 'green';
            removeErrorMessages(parentNode);
        } else {
            emailElement.style.borderColor = 'red';
            insertErrorMessage(parentNode, 'Invalid Email Address');
        }

        return isEmailValid;
    }

  
    function isValidMobileNumber(mobileNumber) {
        const mobileRegex = /^\d{10}$/;
        return mobileRegex.test(mobileNumber);
    }

    
    function checkMobileNumber() {
        const mobileNumberValue = mobileNumberInput.value.trim();
        const isMobileNumberValid = isValidMobileNumber(mobileNumberValue);
        const mobileNumberElement = document.getElementById('MobileNumber');
        var parentNode = mobileNumberElement.parentElement;
        if (mobileNumberValue === '') {
            mobileNumberElement.style.borderColor = '#ccc';
            removeErrorMessages(parentNode);
        } else if (isMobileNumberValid) {
            mobileNumberElement.style.borderColor = 'green';
            removeErrorMessages(parentNode);
        } else {
            mobileNumberElement.style.borderColor = 'red';
            insertErrorMessage(parentNode, 'Invalid Phone Number');
            
        }

        return isMobileNumberValid;
    }
    
    emailInput.addEventListener('input', checkEmail);
    mobileNumberInput.addEventListener('input', checkMobileNumber);

</script>